<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Winter Bud]]></title>
  <link href="http://wibud.github.io/atom.xml" rel="self"/>
  <link href="http://wibud.github.io/"/>
  <updated>2014-10-15T00:55:53+08:00</updated>
  <id>http://wibud.github.io/</id>
  <author>
    <name><![CDATA[wibud]]></name>
    <email><![CDATA[wi_bud@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript严格模式详解]]></title>
    <link href="http://wibud.github.io/blog/2014/01/09/javascriptyan-ge-mo-shi-xiang-jie/"/>
    <updated>2014-01-09T15:17:48+08:00</updated>
    <id>http://wibud.github.io/blog/2014/01/09/javascriptyan-ge-mo-shi-xiang-jie</id>
    <content type="html"><![CDATA[<h2>一、简介</h2>

<p>严格模式（strict mode）是在ES5（ECMAScript 5）中引入的一种新的JavaScript运行模式，该模式下，禁止了很多JavaScript中问题较多、容易出错、影响应能的特性，目的是让JavaScript在更为严格的条件下运行，减少怪异行为和语言不合理的地方，提高编译运行性能（比如禁用with语句），增强了代码本身的安全性。</p>

<p>在ES5之前的版本是不支持严格模式的，但是严格模式有很好的向后兼容性，因为低版本标准的引擎会忽略严格模式的声明，这个会在之后进行介绍。</p>

<p>想了解各浏览器对于严格模式的支持情况戳这里<a href="http://kangax.github.io/es5-compat-table/">ECMAScript 5 compatibility table</a>，其中还统计了ES5新增特性的兼容情况。</p>

<h2>二、声明</h2>

<p>声明调用严格模式十分简单，也有些怪异，使用字符串字面量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之所以使用字符串字面量好处就是可以向后兼容，对于不支持严格模式的引擎，执行这条语句没有任何作用和影响。当然，如果我们使用了严格模式，那么就需要使用支持严格模式的引擎进行测试，使用低版本的引擎无法检测出严格模式下的错误。</p>

<p>声明方式有如下两种：</p>

<ul>
<li>1、声明整个脚本</li>
</ul>


<p>将<code>"use strict;"</code>在脚本文件第一行，且必须是第一行，否则严格模式将无效。</p>

<blockquote><p>在<code>"use strict;"</code>前不能有任何执行语句，即使是一个空的分号，都会使严格模式失效。</p></blockquote>

<p><code>&lt;script&gt;</code>包含的脚本块和引入的外部文件对于严格模式来说都是相互独立的，也就是说，一个脚本块或脚本文件设置成严格模式执行，并不会影响到其他的脚本块和脚本文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;严格模式&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;正常模式&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2、声明单个函数体</li>
</ul>


<p>单个函数的声明和整个脚本的类似，需要将<code>"use strict;"</code>放在函数体的第一行。这样该函数就会以严格模式运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>在大型多人合作的项目中使用严格模式，就需要多加注意了。因为，在开发中可能使用了多个脚本文件，而在部署时，会将多个文件合并成一个，如果有的脚本文件使用严格模式，而有的并没有使用，那么合并起来就可能导致意想不到的问题。比如，需要使用严格模式的地方失效了，而不需要使用严格模式的地方反而运行在严格模式下了。</p>

<p>对于此类问题，有如下两种的解决方法：</p>

<ul>
<li>1、不将严格模式运行的文件和正常模式运行的文件合并起来。</li>
</ul>


<p>这应该是最简单的解决方法了，那么你在部署的时候就至少需要两个独立的脚本文件。但这样无疑会对你的文件管理增加负担。</p>

<ul>
<li>2、使用独立作用域（立即调用的函数表达式）</li>
</ul>


<p>将脚本文件内容包含再立即调用的函数表达式中，就好像模块一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样合并成一个文件以后就不会相互影响了</p>

<h2>三、严格模式的限制</h2>

<p>以下列出了严格模式最主要的限制。</p>

<ul>
<li>1、变量必须使用var声明</li>
</ul>


<p>正常模式下，未声明的变量，默认是全局变量，而在严格模式下，必须对变量进行声明，否则会报错：“SCRIPT5042：严格模式下未定义变量”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">testValue</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// 报错</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>    <span class="c1">// 报错</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2、禁止写入只读属性</li>
</ul>


<p>正常模式下，对对象的只读属性进行赋值，不会出现错误，只是会默认失效，而在严格模式下，写入只读属性（包括使用get进行读取的属性）会报错：“SCRIPT5045：严格模式下不允许分配到只读属性”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testObj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">({},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">prop1</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span> <span class="c1">// by default</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">prop2</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">testObj</span><span class="p">.</span><span class="nx">prop1</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>     <span class="c1">// 报错</span>
</span><span class='line'><span class="nx">testObj</span><span class="p">.</span><span class="nx">prop2</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>     <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>3、禁止为不可扩展的对象新增属性</li>
</ul>


<p>正常模式下，为不可扩展的对象添加属性不会报错，只会默认失效，而在严格模式下，会报错：“SCRIPT5046：无法为不可扩展的对象创建属性”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">testObj</span><span class="p">);</span>
</span><span class='line'><span class="nx">testObj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span><span class="p">;</span>   <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4、禁止删除变量、函数、参数和configurable为false的属性</li>
</ul>


<p>在严格模式下，只有configurable特性设置为true的对象属性才可以被删除，否则将报错：“SCRIPT1045：严格模式下不允许对 &lt;表达式> 调用 Delete”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testvar</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">testFunc</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">testvar</span><span class="p">;</span>     <span class="c1">// 报错</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">testFunc</span><span class="p">;</span>    <span class="c1">// 报错</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">testObj</span><span class="p">,</span> <span class="s2">&quot;testvar&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">testObj</span><span class="p">.</span><span class="nx">testvar</span><span class="p">;</span>     <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>5、禁止对象属性名重复</li>
</ul>


<p>正常模式下，如果对象的属性名重复，那么后一个属性的值会覆盖前一个同名属性的值，而在严格模式下，如果对象有同名属性，则会报错：“SCRIPT1046：严格模式下不允许一个属性有多个定义”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">prop1</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">prop2</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">prop1</span><span class="o">:</span> <span class="mi">20</span>
</span><span class='line'><span class="p">};</span>  <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>6、禁止函数参数名重复</li>
</ul>


<p>正常模式下，如果函数有多个重名参数，则可以使用argument[i]来读取相应的参数，而在严格模式下，如果函数存在参数重名，则会报错：“SCRIPT1038：严格模式下不允许正式参数名称重复”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">testFunc</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>  <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>7、保留关键字</li>
</ul>


<p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。</p>

<p>在严格模式下，使用这些这些保留字做变脸或函数名都会报错：“SCRIPT1050：无法使用标识符的未来保留字。 严格模式下将保留标识符名称。”</p>

<blockquote><p>此外，ECMAscript第五版本身还规定了另一些保留字（class, enum, export, extends, import, super），以及各大浏览器自行增加的const保留字，也是不能作为变量名的。</p></blockquote>

<ul>
<li>8、禁止八进制数值</li>
</ul>


<p>正常模式下，整数数值的第一位如果是0，表示是八进制数，而在严格模式下，禁止对数值文本分配八进制值，或尝试对八进制值使用转义，否则报错：“SCRIPT1039：严格模式下不允许使用八进制数字参数和转义字符”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testoctal</span> <span class="o">=</span> <span class="mi">010</span><span class="p">;</span>    <span class="c1">// 报错</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testescape</span> <span class="o">=</span> <span class="err">\</span><span class="mi">010</span><span class="p">;</span>  <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>9、禁止this指向全局对象</li>
</ul>


<p>在严格模式下，当 this 的值为 null 或 undefined 时，该值不会转换为全局对象，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">testFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">testvar</span> <span class="o">=</span> <span class="nx">testFunc</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在正常的模式下，testvar的值为全局对象，但在严格模式下，该值为 undefined。</p>

<p>再比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
</span><span class='line'><span class="err">　　　　</span><span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="c1">// 返回false，因为&quot;this&quot;指向全局对象，&quot;!this&quot;就是false</span>
</span><span class='line'><span class="err">　　</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
</span><span class='line'><span class="err">　　　　</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="c1">// 返回true，因为严格模式下，this的值为undefined，所以&quot;this&quot;为true。</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(){</span>
</span><span class='line'><span class="err">　　　　</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　　　</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="nx">f</span><span class="p">();</span><span class="c1">// 报错，this未定义</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是在IE10的PP2版（支持严格模式）中对于严格模式下得this存在bug，对于<code>(function(){ "use strict"; return !this })()</code>返回的是false。</p>

<ul>
<li><p>10、禁止“eval”用作标示符（变量、函数名、参数名等）</p></li>
<li><p>11、eval具有独立作用域</p></li>
</ul>


<p>正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">indirectEval</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">;</span>
</span><span class='line'><span class="nx">indirectEval</span><span class="p">(</span><span class="s2">&quot;var testvar = 10;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">testVar</span><span class="p">);</span>    <span class="c1">// 报错，testVar未定义</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>12、禁止在语句或块内声明函数</li>
</ul>


<p>严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数，否则将会报错：“SCRIPT1047：在严格模式下，函数声明无法嵌套在语句或块中。 它们只能显示在顶级或直接显示在函数体中。”</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">index</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{};</span>   <span class="c1">// 报错</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>13、禁止“arguments”用作标示符（变量、函数名、参数名等）</p></li>
<li><p>14、禁止对arguments对象赋值</p></li>
<li><p>15、arguments不再影响和追踪参数值</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">　　</span>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span>  <span class="nx">a</span><span class="o">++</span><span class="err">；</span>
</span><span class='line'><span class="err">　　</span>  <span class="k">return</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'><span class="err">　　</span> <span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// [2,1]</span>
</span><span class='line'><span class="err">　　</span>
</span><span class='line'><span class="err">　　</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">　　</span>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span>  <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">++</span><span class="err">；</span>
</span><span class='line'><span class="err">　　</span>  <span class="k">return</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'><span class="err">　　</span> <span class="p">}</span>
</span><span class='line'><span class="err">　　</span> <span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>    <span class="c1">// [1,2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在严格模式下，arguments对象只是一个本地副本。</p>

<ul>
<li>16、禁止使用arguments.callee</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="err">　　</span><span class="nx">f</span><span class="p">();</span> <span class="c1">// 报错</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>17、禁止使用with</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="err">　　</span><span class="kd">with</span> <span class="p">(</span><span class="nb">Math</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">=</span> <span class="nx">cos</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">y</span> <span class="o">=</span> <span class="nx">tan</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress主题]]></title>
    <link href="http://wibud.github.io/blog/2013/12/20/octopresszhu-ti/"/>
    <updated>2013-12-20T17:52:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/12/20/octopresszhu-ti</id>
    <content type="html"><![CDATA[<p>在Octopress默认主题的基础上进行了一些修改，把nav移到了顶端，同时在左侧增加了展示用户信息的sidebar。当浏览器宽度小于1152时，添加了响应式的布局。</p>

<p>源码地址：<a href="https://github.com/wibud/Octopress-Theme-WinterBud">github</a></p>

<p>如果对主题感兴趣，安装方式如下：</p>

<pre><code>$ cd octopress
$ git clone git://github.com/wibud/Octopress-Theme-WinterBud.git .themes/WinterBud
$ rake install['WinterBud']
$ rake generate
</code></pre>

<p><img src="http://wibud.github.io/images/private/blog-screen.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GET和POST请求]]></title>
    <link href="http://wibud.github.io/blog/2013/08/05/gethe-postqing-qiu/"/>
    <updated>2013-08-05T11:12:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/08/05/gethe-postqing-qiu</id>
    <content type="html"><![CDATA[<h3>GET请求</h3>

<p>GET是最常见的请求类型，最常用于向服务器查询信息。如果要发送信息给服务器的话，需要将查询字符串参数追加到URL的末尾。</p>

<p>使用GET请求经常会发生一个错误，就是查询字符串参数的格式有问题。对于Javascript来说查询字符串中每个参数的名称和值都必须使用<code>encodeURIComponent()</code>进行编码，然后才能放到URL的末尾。</p>

<h3>POST请求</h3>

<p>POST通常用于向服务器发送应该被保存的数据。POST请求把数据作为请求的主体提交。POST请求的主体可以包含非常多的数据，而且格式不限。</p>

<h3>GET和POST的区别</h3>

<ul>
<li>GET只要是用来查询数据；POST主要用来提交数据</li>
<li>GET提交的数据是缀到URL末尾的，GET方式值发送HTTP消息头，没有消息体；POST的提交的数据是在消息体中</li>
<li>GET提交的数据量小，因为URL长度有限制；POST能提交大量数据</li>
<li>GET消耗的资源少；POST消耗的资源多</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cookie与session]]></title>
    <link href="http://wibud.github.io/blog/2013/08/03/cookieyu-session/"/>
    <updated>2013-08-03T11:11:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/08/03/cookieyu-session</id>
    <content type="html"><![CDATA[<h2>Cookie</h2>

<p>HTTP Cookie，通常直接叫做cookie，是在客户端用户存储会话信息的。cookie存储的信息是由服务器经HTTP头作为响应发给客户端的。例如服务器相应可能如下：</p>

<pre><code>HTTP/1.1 200 OK
Content-type:text/html
Set-Cookie:name=value
</code></pre>

<p>其中的<code>Set-Cookie</code>包含着会话信息，浏览器会存储这些会话信息，之后会为每个请求添加Cookie HTTP头，将信息发送回服务器，如下</p>

<pre><code>GET /index.html HTTP/1.1
Cookie:name=value
</code></pre>

<p>因为Cookie是存储在浏览器上，浏览器资源有限，所以Cookie的个数和大小会有限制，不同的浏览器对Cookie 的限制不同，有的限制每个域只能有20个Cookie，且每个域Cookie总大小限制在4095B，有的浏览器可能会多些。</p>

<h3>Cookie构成</h3>

<ul>
<li>名称：唯一确定cookie，名称是不区分大小写的</li>
<li>值：存储在cookie中的字符串的值，必须被URL编码</li>
<li>域：表示cookie对哪个域是有效的，所有向该有效域发送的请求都会加上这个cookie信息。如果没有设置，默认是设置cookie的域</li>
<li>路径：对于制定域中的那个路径，应该向服务器发送cookie</li>
<li>失效时间：表示cookie应该何时被删除。如果不设定，默认情况下，浏览器会话结束就会删除cookie（会话cookie）。如果设置了时间（大于当前时间），则浏览器关闭后cookie依然会保存在用户机器上（持久cookie）。这个值是GMT格式的日期。</li>
<li>安全标志</li>
</ul>


<h3>Javascript操作cookie</h3>

<p> <code>document.cookie</code>属性返回当前页面可用的（根据cookie的域、路径、失效时间和安全设置）所有cookie的字符串，一系列由分号分隔的名值对，如下：</p>

<pre><code>name1=value1;name2=value2;name3=value3
</code></pre>

<p>所有名字和值都是URL编码的，所以必须使用<code>decodeURIComponent()</code>解码。</p>

<p>设置值得时候，可以直接给<code>document.cookie</code>属性赋值，并不会覆盖cookie，除非设置的cookie名称已经存在。</p>

<p>由于cookie操作比较麻烦，并不直观，下面来看一个简化cookie操作的功能对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">CookieUtil</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">cookieName</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;=&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">cookieStart</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">indexof</span><span class="p">(</span><span class="nx">cookieName</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">cookieValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">cookieStart</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">cookieEnd</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">indexof</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">,</span><span class="nx">cookieStart</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nx">cookieEnd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">cookieEnd</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">cookieValue</span> <span class="o">=</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">cookieStart</span><span class="o">+</span><span class="nx">cookieName</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">cookieEnd</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">cookieValue</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">expires</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">domain</span><span class="p">,</span> <span class="nx">secure</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">cookieText</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;=&quot;</span><span class="o">+</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">expires</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">cookieText</span> <span class="o">+=</span> <span class="s2">&quot;; expires=&quot;</span> <span class="o">+</span> <span class="nx">expires</span><span class="p">.</span><span class="nx">toGMTString</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">path</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">cookieText</span> <span class="o">+=</span> <span class="s2">&quot;; path=&quot;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">domain</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">cookieText</span> <span class="o">+=</span> <span class="s2">&quot;; domain=&quot;</span> <span class="o">+</span> <span class="nx">domain</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">secure</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">cookieText</span> <span class="o">+=</span> <span class="s2">&quot;; secure&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span> <span class="o">=</span> <span class="nx">cookieText</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Session</h2>

<p>Session机制是一种服务器端维持会话状态的机制。每个session唯一的由一个session id标示，session id是存储在客户端的，由客户端请求时发给服务器来与相应的session建立联系。</p>

<p>session id一般来说是保存在cookie中，当然如果cookie被禁用了，我们就需要其他的存储手段，比如：URL重写，就是把session id附加到URL路径的后面，还有一种技术叫表单隐藏字段，给表单添加一个隐藏字段。</p>

<h3>Session什么时候创建</h3>

<p>session是在服务器端程序调用HttpServletRequest.getSession(true)这样的语句时才被创建，而不是客户端访问的时候被创建的。</p>

<p>注意JSP如果没有显示的关闭session，会自动创建session。</p>

<h3>Session什么时候被删除</h3>

<ul>
<li>程序调用<code>HttpSession.invalidate()</code></li>
<li>session超时</li>
<li>服务器进程停止</li>
</ul>


<p>要注意的是session id一般是保存在会话cookie中，会话cookie会在浏览器关闭之后被删除，于是，相应的session id也会被删除，但是这时并不代表session也被删除了，服务器会一直保留session直到session处于非活动状态的时间超过了设置的超时时间，这时才会删除session。</p>

<h2>Cookie与Session的区别</h2>

<p>cookie机制采用的是在客户端保持状态的机制，cookie信息保存在客户端。cookie存储空间小。</p>

<p>session机制采用的是服务器端保持状态的机制，session信息保存在服务器端。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax相关总结]]></title>
    <link href="http://wibud.github.io/blog/2013/08/02/ajaxxiang-guan-zong-jie/"/>
    <updated>2013-08-02T11:09:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/08/02/ajaxxiang-guan-zong-jie</id>
    <content type="html"><![CDATA[<h3>创建XMLHttpRequest对象</h3>

<p>创建XMLHttpRequest对象，跨浏览器兼容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">function</span> <span class="nx">createXHR</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果支持原生XHR对象</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">XMLHttpRequest</span> <span class="o">!=</span> <span class="s2">&quot;undefined&quot;</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 兼容IE6和之前版本</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">ActiveXObject</span> <span class="o">!=</span> <span class="s2">&quot;undefined&quot;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// arguments.callee.activeXString存放版本信息</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">activeXString</span> <span class="o">!=</span> <span class="s2">&quot;string&quot;</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 可能有3中不同版本的XHR对象</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">versions</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;MSXML2.XMLHttp.6.0&quot;</span><span class="p">,</span> <span class="s2">&quot;MSXML2.XMLHttp.3.0&quot;</span><span class="p">,</span> <span class="s2">&quot;MSXML2.XMLHttp&quot;</span><span class="p">],</span>
</span><span class='line'>                    <span class="nx">i</span><span class="p">,</span><span class="nx">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">versions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// 如果不能创建相应版本的XHR对象，会抛异常，继续检查下一个版本</span>
</span><span class='line'>                    <span class="k">try</span><span class="p">{</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="nx">versions</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                        <span class="c1">// 如果可以创建该版本的XHR对象，则记录版本</span>
</span><span class='line'>                        <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">activeXString</span> <span class="o">=</span> <span class="nx">versions</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">){</span>
</span><span class='line'>                        <span class="c1">// 没有操作</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">activeXString</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;No XHR object available&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>响应处理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="nx">createXHR</span><span class="p">()</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// 必须在调用open()之前指定onreadystatechange事件处理才能确保跨浏览器的兼容性</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystartechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="c1">// 请求/响应过程完成</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">httpSuccess</span><span class="p">(</span><span class="nx">xhr</span><span class="p">)){</span>
</span><span class='line'>                <span class="c1">// 响应的处理</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="c1">// 请求/响应不成功</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;get&quot;</span><span class="p">,</span> <span class="s2">&quot;example.txt&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">httpSuccess</span><span class="p">(</span><span class="nx">xhr</span><span class="p">){</span>
</span><span class='line'>        <span class="k">try</span><span class="p">{</span>
</span><span class='line'>            <span class="c1">// 如果得不到服务器状态，且我们正在请求本地文件，认为成功</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">&amp;&amp;</span> <span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">==</span><span class="s2">&quot;file:&quot;</span> <span class="o">||</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// 所有200到300间的状态码表示成功（包括200，不包括300）</span>
</span><span class='line'>                    <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// 文档未修改也算成功</span>
</span><span class='line'>                    <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">304</span> <span class="o">||</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// Safari 在文档未修改时返回空状态</span>
</span><span class='line'>                    <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">indexof</span><span class="p">(</span><span class="s2">&quot;Safari&quot;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                        <span class="k">typeof</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="s2">&quot;undefined&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h4>常见的status返回码</h4>

<ul>
<li>403:Access Forbidden。通常是服务器上文件或目录的权限设置导致</li>
<li>404：Object not found。请求资源不存在</li>
<li>401：Access Denied。由于用户匿名访问使用的账号被禁用，或者没有权限访问计算机。</li>
<li>500：Internal Server Error。服务器发生错误。</li>
</ul>


<h3>AJAX跨域请求（CORS）</h3>

<p>跨浏览器的CORS：</p>

<pre><code>function createCORSRequest(method, url){
    var xhr = new XMLHttpRequest();
    // 检测XHR是否支持CORS
    if("withCredentials" in xhr){
        xhr.open(method, url, true);

    // 准对IE（IE8及之后版本）
    }else if(typeof XDomainRequest != "undefined"){
        xhr = new XDomainRequest();
        xhr.open(method, url);
    }else{
        xhr = null;
    }
    return xhr;
}

var request = createCORSRequest("get", "http://www.test.com/index");
if(request){
    // 请求返回会触发load事件
    request.onload = function(){
        // 操作
    };

    request.send();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP头信息]]></title>
    <link href="http://wibud.github.io/blog/2013/07/27/httptou-xin-xi/"/>
    <updated>2013-07-27T11:08:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/07/27/httptou-xin-xi</id>
    <content type="html"><![CDATA[<p>当我们在浏览器的地址栏中输入了URL之后发生了什么？</p>

<ol>
<li>浏览器分析我们输入的地址，解析所要使用的协议为HTTP协议</li>
<li>浏览器向DNS请求解析URL的IP地址</li>
<li>域名系统DNS解析出所请求的URL服务器的IP地址</li>
<li>浏览器与服务器建立TCP连接</li>
<li>浏览器发出HTTP请求</li>
<li>服务器通过HTTP响应把文件返回给浏览器</li>
<li>浏览器将文件进行解释，并将web页显示给用户</li>
</ol>


<h3>HTTP头信息</h3>

<p>每个HTTP请求和响应都分为消息头和消息体两部分，而头部信息是一定会有的。</p>

<p>默认情况下HTTP请求会发送下列的头信息：</p>

<ul>
<li>Accept：浏览器能够处理的内容类型&ndash;content-type</li>
<li>Accept-Charset：浏览器能显示的字符集</li>
<li>Accept-Encoding：浏览器能处理的压缩编码</li>
<li>Accept-Language：浏览器当前设置的语言</li>
<li>Connection：浏览器与服务器之间连接的类型</li>
<li>Cookie：当前页面设置的任何Cookie</li>
<li>Host：发出请求的页面所在的域</li>
<li>Referer：发出请求的页面的URL</li>
<li>User-Agent：浏览器的用户代理字符串（包括浏览器类型、操作系统信息等）</li>
</ul>


<p>看一个例子：</p>

<pre><code>GET /index.html HTTP/1.1
Accept:application/x-shockwave-flash
Accept-Language:zh-cn
Accept-Encoding:gzip
Cookie:name=value
User-Agent:Mozilla/4.0
Host:localhost:8080
Connection:Keep-Alive
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[范式]]></title>
    <link href="http://wibud.github.io/blog/2013/07/15/fan-shi/"/>
    <updated>2013-07-15T11:04:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/07/15/fan-shi</id>
    <content type="html"><![CDATA[<h2>范式</h2>

<p>构造数据库必须遵循一定的规则。在关系数据库中，这种规则就是范式。范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，即满足不同的范式。目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、第四范式（4NF）、第五范式（5NF）和第六范式（6NF）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式（3NF）就行了。下面我们举例介绍第一范式（1NF）、第二范式（2NF）和第三范式（3NF）。</p>

<h3>第一范式（1NF）</h3>

<p>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。所谓第一范式（1NF）是指</p>

<ul>
<li>数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。</li>
<li>在第一范式（1NF）中表的每一行只包含一个实例的信息。</li>
</ul>


<blockquote><p>简而言之，第一范式就是无重复的列。属性唯一</p></blockquote>

<h3>第二范式（2NF）</h3>

<blockquote><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p></blockquote>

<p>第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键、主码。第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</p>

<blockquote><p>简而言之，第二范式就是非主属性非部分依赖于主关键字。</p></blockquote>

<p>感觉很绕有没有？</p>

<p><strong>什么叫全部依赖，部分依赖？</strong>首先需要清楚一个概念，主关键字不是一个属性而是一组属性的集合，这个属性集合唯一的决定记录（实例）。现在再来看部分依赖，部分依赖就是主关键字这一组属性中的部分属性可以决定非主属性。</p>

<h3>第三范式（3NF）</h3>

<p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p>

<blockquote><p>简而言之，第三范式就是属性不依赖于其它非主属性。</p></blockquote>

<!-- more -->


<h2>范式的例子</h2>

<p>所谓范式就是符合某一种级别的关系模式的集合。通过分解把属于低级范式的关系模式转换为几个属于高级范式的关系模式的集合。这一过程称为规范化。</p>

<h3>第一范式（1NF）</h3>

<p>数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</p>

<h3>第二范式（2NF）</h3>

<p>数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</p>

<p>假定选课关系表为SelectCourse(学号, 姓名, 年龄, 课程名称, 成绩, 学分)，关键字为组合关键字(学号, 课程名称)，因为存在如下决定关系：</p>

<p>(学号, 课程名称) → (姓名, 年龄, 成绩, 学分)</p>

<p>这个数据库表不满足第二范式，因为存在如下决定关系：</p>

<p>(课程名称) → (学分)</p>

<p>(学号) → (姓名, 年龄)</p>

<p>即存在组合关键字中的字段决定非关键字的情况。</p>

<p>由于不符合2NF，这个选课关系表会存在如下问题：</p>

<p>　　(1) 数据冗余：</p>

<p>　　同一门课程由n个学生选修，&#8221;学分&#8221;就重复n-1次；同一个学生选修了m门课程，姓名和年龄就重复了m-1次。</p>

<p>　　(2) 更新异常：</p>

<p>　　若调整了某门课程的学分，数据表中所有行的&#8221;学分&#8221;值都要更新，否则会出现同一门课程学分不同的情况。</p>

<p>　　(3) 插入异常：</p>

<p>　　假设要开设一门新的课程，暂时还没有人选修。这样，由于还没有&#8221;学号&#8221;关键字，课程名称和学分也无法记录入数据库。</p>

<p>　　(4) 删除异常：</p>

<p>　　假设一批学生已经完成课程的选修，这些选修记录就应该从数据库表中删除。但是，与此同时，课程名称和学分信息也被删除了。很显然，这也会导致插入异常。</p>

<p>　　把选课关系表SelectCourse改为如下三个表：</p>

<p>　　学生：Student(学号, 姓名, 年龄)；</p>

<p>　　课程：Course(课程名称, 学分)；</p>

<p>　　选课关系：SelectCourse(学号, 课程名称, 成绩)。</p>

<p>　　这样的数据库表是符合第二范式的，消除了数据冗余、更新异常、插入异常和删除异常。</p>

<p>　　另外，所有单关键字的数据库表都符合第二范式，因为不可能存在组合关键字。</p>

<h3>第三范式（3NF）</h3>

<p>在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存在&#8221;A → B → C&#8221;的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系：</p>

<pre><code>关键字段 → 非关键字段x → 非关键字段y
</code></pre>

<p>　　假定学生关系表为Student(学号, 姓名, 年龄, 所在学院, 学院地点, 学院电话)，关键字为单一关键字&#8221;学号&#8221;，因为存在如下决定关系：</p>

<p>　　(学号) → (姓名, 年龄, 所在学院, 学院地点, 学院电话)</p>

<p>　　这个数据库是符合2NF的，但是不符合3NF，因为存在如下决定关系：</p>

<p>　　(学号) → (所在学院) → (学院地点, 学院电话)</p>

<p>　　即存在非关键字段&#8221;学院地点&#8221;、&#8221;学院电话&#8221;对关键字段&#8221;学号&#8221;的传递函数依赖。</p>

<p>　　它也会存在数据冗余、更新异常、插入异常和删除异常的情况，读者可自行分析得知。</p>

<p>　　把学生关系表分为如下两个表：</p>

<p>　　学生：(学号, 姓名, 年龄, 所在学院)；</p>

<p>　　学院：(学院, 地点, 电话)。</p>

<p>　　这样的数据库表是符合第三范式的，消除了数据冗余、更新异常、插入异常和删除异常。</p>

<h3>鲍依斯-科得范式（BCNF）</h3>

<p>在第三范式的基础上，数据库表中如果不存在任何字段对任一候选关键字段的传递函数依赖则符合第三范式。</p>

<p>　假设仓库管理关系表为StorehouseManage(仓库ID, 存储物品ID, 管理员ID, 数量)，且有一个管理员只在一个仓库工作；一个仓库可以存储多种物品。这个数据库表中存在如下决定关系：</p>

<p>　　(仓库ID, 存储物品ID) →(管理员ID, 数量)</p>

<p>　　(管理员ID, 存储物品ID) → (仓库ID, 数量)</p>

<p>　　所以，(仓库ID, 存储物品ID)和(管理员ID, 存储物品ID)都是StorehouseManage的候选关键字，表中的唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：</p>

<p>　　(仓库ID) → (管理员ID)</p>

<p>　　(管理员ID) → (仓库ID)</p>

<p>　　即存在关键字段决定关键字段的情况，所以其不符合BCNF范式。它会出现如下异常情况：</p>

<p>(1) 删除异常：</p>

<p>　　当仓库被清空后，所有&#8221;存储物品ID&#8221;和&#8221;数量&#8221;信息被删除的同时，&#8221;仓库ID&#8221;和&#8221;管理员ID&#8221;信息也被删除了。</p>

<p>　　(2) 插入异常：</p>

<p>　　当仓库没有存储任何物品时，无法给仓库分配管理员。</p>

<p>　　(3) 更新异常：</p>

<p>　　如果仓库换了管理员，则表中所有行的管理员ID都要修改。</p>

<p>　　把仓库管理关系表分解为二个关系表：</p>

<p>　　仓库管理：StorehouseManage(仓库ID, 管理员ID)；</p>

<p>　　仓库：Storehouse(仓库ID, 存储物品ID, 数量)。</p>

<p>　　这样的数据库表是符合BCNF范式的，消除了删除异常、插入异常和更新异常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS hack]]></title>
    <link href="http://wibud.github.io/blog/2013/07/11/css-hack/"/>
    <updated>2013-07-11T11:02:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/07/11/css-hack</id>
    <content type="html"><![CDATA[<p>CSS hack方式很多，下面介绍几种常见的</p>

<h3>IE条件注释</h3>

<p>针对IE引入样式文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;!</span><span class="nt">--</span><span class="o">[</span><span class="nt">if</span> <span class="nt">IE</span><span class="o">]&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">link</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/CSS&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;ie.css&quot;</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;![</span><span class="nt">end</span> <span class="nt">if</span><span class="o">]</span><span class="nt">--</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对特定版本的IE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;!</span><span class="nt">--</span><span class="o">[</span><span class="nt">if</span> <span class="nt">IE</span> <span class="nt">6</span><span class="o">]&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">link</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/CSS&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;ie6.css&quot;</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;![</span><span class="nt">end</span> <span class="nt">if</span><span class="o">]</span><span class="nt">--</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对某个版本范围的IE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;!</span><span class="nt">--</span><span class="o">[</span><span class="nt">if</span> <span class="nt">gte</span> <span class="nt">IE</span> <span class="nt">6</span><span class="o">]&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">link</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/CSS&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;ie6.css&quot;</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;![</span><span class="nt">end</span> <span class="nt">if</span><span class="o">]</span><span class="nt">--</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中“lte“表示“小于等于”，“lt”表示“小于”，“gte”表示“大于等于”，“gt”表示“大于”，“！”表示“不等于”</p>

<h3>选择符前缀</h3>

<p>原理是在CSS选择符前加上一些只有特定浏览器才能识别的值，例如<code>* html</code>只对IE6及更低版本有效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>   <span class="o">&lt;</span><span class="nt">style</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/CSS&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">*</span> <span class="nt">html</span> <span class="nc">.test</span><span class="p">{</span><span class="k">width</span><span class="o">:</span><span class="m">100%</span><span class="p">;}</span>    <span class="c">/* 只对IE6及更低版本有效 */</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>样式属性前缀</h3>

<p>在样式的属性名前加上只有特定浏览器下才能生效的前缀，例如”_“只在IE6下有效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>   <span class="o">&lt;</span><span class="nt">style</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/CSS&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nc">.test</span><span class="p">{</span><span class="k">width</span><span class="o">:</span><span class="m">80px</span><span class="p">;</span> <span class="n">_width</span><span class="o">:</span><span class="m">70px</span><span class="p">;}</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>子选择器hack</h3>

<p>使用子选择器hack，是使用了IE老版本不理解而现代浏览器能够理解的选择器，这样在IE老版本就会忽略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="nt">html</span><span class="o">&gt;</span><span class="nt">body</span><span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(bg.png)</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个规则对于IE6以及之前老版本是隐藏的。</p>

<h3>明智的使用hack</h3>

<p>使用hack的时候需要谨慎，有时hack会相当复杂，这会使你的CSS文件很长而且很复杂，十分不宜阅读。而且很多hack会有向后兼容的问题，这些hack是针对浏览器是否识别特殊的前缀和属性来实现的，但不能保证之后的浏览器对这些前缀和属性的识别能力。如果确实要使用hack，最好将hack放到统一的样式表中，同时一定要写好注释，便于管理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[float小细节]]></title>
    <link href="http://wibud.github.io/blog/2013/07/08/floatxiao-xi-jie/"/>
    <updated>2013-07-08T10:28:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/07/08/floatxiao-xi-jie</id>
    <content type="html"><![CDATA[<p>之前看了一篇文章，它设置basse.css的时候定义了很多的通用原子类，其中的.fl和.fr类是这样写的：<code>.fl{float:left;display:inline}</code>,<code>.fr{float:right;display:inline}</code></p>

<h3>为什么要在设置了<code>float:left</code>和<code>float:right</code>之外，还要设置<code>display:inline</code>呢？</h3>

<p>其实这是为了解决IE6的双外边距的bug。在IE6中，如果对元素设置了浮动，同时又设置了margin-left或者margin-right的话，margin的值会加倍。解决这个问题的办法就是这是<code>display:inline</code>。所以在设计通用原子类的时候将<code>display:inline</code>引入.fl和.fr类中。</p>

<h3>这样不会影响块级元素吗？</h3>

<p>如果我们对块级元素赋予.fl或.fr类，其中的<code>display:inline</code>不会将块级元素变成行内元素了吗？其实这一点不用担心，<code>float:left</code>，<code>float:right</code>还有<code>position:absolute</code>，会让元素以<code>display:inline-block</code>的方式显示，就算我们设置了<code>display:inline</code>或者<code>display:block</code>，也仍然无效。</p>

<h3>display:inline-block</h3>

<p>disploy的值除了inline和block之外，还有一个十分有用的值：inline-block（IE6,IE7不支持，但是可以实现相同效果）。</p>

<p><code>display:inline-block</code>，从写法上就不难看出，它可肯定是行内元素特性inline和块级元素特性block的结合体，它具有块级元素的特点，可以设置长宽，margin和padding；又具有行内元素的特点，它不独占一行。</p>

<p>那在IE6和IE7下如何实现呢，我们知道IE为盒模型设计了一个专门的属性hasLayout，如果触发行内元素的hasLayout，就能让行内元素拥有块级元素的特性，达到<code>display:inline-block</code>的效果。幸运的是设置<code>display:inline-block</code>，就可以触发hasLayout。当然在IE6和IE7下还是有局限性，我们只能对行内元素实现<code>display:inline-block</code>的效果，对于块级元素就不行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[监听DOM加载完毕]]></title>
    <link href="http://wibud.github.io/blog/2013/05/31/jian-ting-domjia-zai-wan-bi/"/>
    <updated>2013-05-31T22:06:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/05/31/jian-ting-domjia-zai-wan-bi</id>
    <content type="html"><![CDATA[<p>我们知道javascript是可以在DOM加载完之前就执行的，如果对没有加载的DOM元素进行操作就会导致错误。浏览器的渲染顺序大致如下：</p>

<ul>
<li>解析HTML</li>
<li>下载外部脚本样式</li>
<li>脚本解析执行</li>
<li>DOM完全构建完成</li>
<li>图片等外部资源加载</li>
<li>网页加载完毕</li>
</ul>


<p>那如何判断DOM是否加载完毕呢？使用body的onload事件进行监听？当然可以，但是body的onload是在所有内容，包括图片、flash啊等等内容全部加载后才触发，导致用户需要等待这部分内容加载后才能看到页面的动态内容，才能同页面进行交互，对于追(ti)求(gao)极(bi)致(ge)的程序猿来说，显然是不能接受的了，其实，只要检查如下3点足矣</p>

<ul>
<li>document</li>
<li>document.getElementByTagName和document.getElementById</li>
<li>document.body</li>
</ul>


<p>检查这三点就足够了。接着我们就可以写一个监听DOM何时加载完毕的函数了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">domReady</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 假如DOM已经加载，马上执行函数</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">domReady</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">f</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 如果已经添加了一个函数</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">domReady</span><span class="p">.</span><span class="nx">timer</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// 把它加入待执行函数清单</span>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">ready</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// 初始化待执行函数的数组</span>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">ready</span> <span class="o">=</span> <span class="p">[</span><span class="nx">f</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 尽可能块的检查DOM是否已可用</span>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">isDOMReady</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 检查DOM是否可用</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">isDOMReady</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 如果我们标记了已可用</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">domReady</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 检查DOM是否可用</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">document</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementByTag</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 如果可用，停止检查</span>
</span><span class='line'>        <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">domReady</span><span class="p">.</span><span class="nx">timer</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 执行所有函数</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">domReady</span><span class="p">.</span><span class="nx">ready</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">domReady</span><span class="p">.</span><span class="nx">ready</span><span class="p">[</span><span class="nx">i</span><span class="p">]();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">ready</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">domReady</span><span class="p">.</span><span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法使用起来很简单，而且不堵塞浏览器的加载。jquery的<code>ready()</code>函数功能使用的就是这种思想，当然实现的更加优雅和完备</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抛开兼容判断，可靠的DOM事件绑定]]></title>
    <link href="http://wibud.github.io/blog/2013/04/03/pao-kai-jian-rong-pan-duan-,ke-kao-de-domshi-jian-bang-ding/"/>
    <updated>2013-04-03T17:17:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/04/03/pao-kai-jian-rong-pan-duan-,ke-kao-de-domshi-jian-bang-ding</id>
    <content type="html"><![CDATA[<p>最近看到了一个很有意思的添加和删除DOM事件的方法，这个方法十分可靠，只是使用绑定事件的传统方法：<code>element.onclick=function(){...}</code>，但是我们知道，传统的绑定方法有一个很大的弊端，那就是一个元素的一个事件只能绑定一个处理程序，而新的方法很好的解决了这个问题。</p>

<p>让我们先回忆一下一般的我们如何跨浏览器的添加事件？</p>

<p>我想大部分应该都是使用如下的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eventUtil</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">addEvent</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">handler</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 判断是否支持标准(W3C)事件绑定</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">ele</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 判断是否是IE事件绑定</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">ele</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">ele</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">type</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 传统事件绑定</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">ele</span><span class="p">[</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handler</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过判断是否支持标准事件绑定还是IE事件绑定来决定使用哪种绑定事件的方式。</p>

<p>而新的这个很有意思的事件绑定方式就不同了，下面来看看</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">addEvent</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">handler</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 为每个事件处理函数赋予一个独立的ID</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">handler</span><span class="p">.</span><span class="nx">$$guid</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">handler</span><span class="p">.</span><span class="nx">$$guid</span> <span class="o">=</span> <span class="nx">addEvent</span><span class="p">.</span><span class="nx">guid</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 为元素建立一个事件类型的散列表</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">element</span><span class="p">.</span><span class="nx">events</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 为每对元素/事件建立一个事件处理函数的散列表</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">handlers</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">type</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">handlers</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">handlers</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 存储已有的事件处理函数(如果已经存在)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">element</span><span class="p">[</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">type</span><span class="p">]){</span>
</span><span class='line'>            <span class="nx">handlers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">[</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">type</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在散列表中存储该事件处理函数</span>
</span><span class='line'>    <span class="nx">handlers</span><span class="p">[</span><span class="nx">handler</span><span class="p">.</span><span class="nx">$$guid</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 赋予一个全局事件处理函数来处理所有工作，使用传统绑定方法</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">[</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handleEvent</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建独立ID的计数器</span>
</span><span class='line'><span class="nx">addEvent</span><span class="p">.</span><span class="nx">guid</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">removeEvent</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">handler</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// 从列表中删除事件处理函数</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">events</span> <span class="o">&amp;&amp;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">type</span><span class="p">]){</span>
</span><span class='line'>        <span class="k">delete</span> <span class="nx">element</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">type</span><span class="p">][</span><span class="nx">handler</span><span class="p">.</span><span class="nx">$$guid</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handlerEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 获取事件对象</span>
</span><span class='line'>    <span class="nx">event</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">||</span> <span class="nx">fixEvent</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">);</span>    <span class="c1">// fixEvent() for IE</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">handlers</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">events</span><span class="p">[</span><span class="nx">type</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 依次执行每个事件处理函数</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">handlers</span><span class="p">){</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$$handlerEvent</span> <span class="o">=</span> <span class="nx">handlers</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$$handlerEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">returnValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 增加一些IE事件对象缺乏的方法</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fixEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// 增加W3C标准事件方法</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefult</span> <span class="o">=</span> <span class="nx">fixEvent</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span> <span class="o">=</span> <span class="nx">fixEvent</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">evnet</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fixEvent</span><span class="p">.</span><span class="nx">preventDefault</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fixEvent</span><span class="p">.</span><span class="nx">stopPropagation</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">cancelBubble</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>不难看出使用传统的绑定方法可以在所有浏览器中工作，并且可以绑定多个事件处理函数。同时this关键字可以在所有绑定函数中使用，this指向的是当前绑定元素。瞬间逼格上涨，不过对比之前区分IE和标准的绑定方式，代码量的暴增可能也会让追求精简的童鞋抓狂吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS实现私有成员]]></title>
    <link href="http://wibud.github.io/blog/2013/03/30/jsshi-xian-si-you-cheng-yuan/"/>
    <updated>2013-03-30T12:19:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/03/30/jsshi-xian-si-you-cheng-yuan</id>
    <content type="html"><![CDATA[<p>我们知道JavaScript是面向对象的语言，但是它同其他比如Java不同，它没有私有成员的概念，所有的对象属性都是共有的。不过我们可以通过闭包来实现私有变量。</p>

<h3>私有变量</h3>

<p>定义构造函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Myobject</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// 私有变量</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">privateValue</span> <span class="o">=</span> <span class="s2">&quot;I&#39;m private value&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 私有函数</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">privateFun</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;I&#39;m private function&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 公有方法，可以访问私有成员的特权函数</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">publicFun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">privateValue</span> <span class="o">+</span> <span class="nx">privateFun</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样`object中的私有成员就对外不可见了，只能通过公共方法进行访问。</p>

<h3>静态私有变量</h3>

<p>之前的私有变量，每个使用构造函数创建的对象都有自己的私有成员，而静态私有变量是要所有的对象共享同一个私有变量，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 静态私有变量</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">staticPrivateValue</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 静态私有函数</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">staticPrivateFun</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;I&#39;m static private function&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 构造函数</span>
</span><span class='line'>    <span class="nx">MyObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 公有方法</span>
</span><span class='line'>    <span class="nx">MyObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">publicFun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">staticPrivateValue</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">staticPrivateFun</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过块级作用域来实现静态私有成员。其中<code>MyObjecct</code>构造函数定义时，没有声明就赋值初始化，导致<code>MyObjecct</code>变成了全局对象，这样在块级作用域外就可以访问到<code>MyObjecct</code>构造函数，而块级作用域中的静态私有变量只有定义的公有方法可以访问，同时对<code>MyObjecct</code>所有对象都是共享的。</p>

<!-- more -->


<h3>单例</h3>

<p>单例即是只能创建一个实例对象，不需要构造函数，直接返回一个对象即可实现单例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">singleObj</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 私有成员</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">privateValue</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">privateFun</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 返回对象</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 公用方法</span>
</span><span class='line'>        <span class="nx">publicFun</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">privateValue</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">privateFun</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过使用一个返回对象的匿名函数来实现单例模式和私有成员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript作用域与闭包]]></title>
    <link href="http://wibud.github.io/blog/2013/03/28/javascriptzuo-yong-yu-yu-bi-bao/"/>
    <updated>2013-03-28T20:11:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/03/28/javascriptzuo-yong-yu-yu-bi-bao</id>
    <content type="html"><![CDATA[<p>在读《JavaScript权威指南》和《JavaScript高级程序设计》的时候感觉俩本书对JS的作用域讲的都不太清晰，于是就自己总结了一下。</p>

<h3>执行环境和作用域</h3>

<p>执行环境就是JS代码执行时所在的环境，每个执行环境都有一个与之关联的<strong>变量对象</strong>，这个对象中就保存着执行环境中的<strong>所有变量和函数</strong>。全局执行环境是最外围的执行环境，也就是window对象了，所以我们定义的全局变量和函数都保存在window对象中。</p>

<p>对于函数来说，每个函数都有一个自己执行环境。</p>

<p>当代码在环境中执行时，会创建一个作用域链，其实就是代码所在的一个个执行环境（嵌套的）的变量对象（函数除外，之后讨论）做成的链，链的最前面当然是变量直接所在的执行环境的变量对象，之后依次是嵌套包含的上级执行环境的变量对象，全局执行环境的变量对象位于链的末尾。使用一个变量时就会从变量的作用域链头部开始往后查找直到找到这个变量。</p>

<p>而<strong>函数</strong>就有些特殊了，函数是通过词法来划分作用域的，在函数定义时，它的作用域链就保存了起来，而并不是执行函数的时候创建的作用域链，这也就是为什么会有闭包这个现象了。函数的作用域链中的变量对象是函数的调用对象（活动对象），调用对象中保存有函数的参数，函数中定义的局部变量。这里注意的是this是一个关键字，并不是调用对象的一个属性，this和arguments都是在函数<strong>执行时</strong>，调用对象取得的，this代表的就是函数据以执行的执行环境</p>

<h3>闭包</h3>

<p>闭包的<strong>定义</strong>：有权访问另一个函数作用域中的变量的函数。简单讲就是在一个函数内部又创建了一个函数。下面讲讲闭包需要注意的问题：</p>

<h4>1. 内存泄漏</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">outer</span><span class="p">(</span><span class="nx">param</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">param</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 创建函数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nx">outer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用函数</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">inner</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面就是一个简单的闭包的例子，正常来看是没什么问题，<code>outer()</code>函数返回后它的作用域链会被销毁，但是它内部的匿名函数的作用域链依然引用<code>outer()</code>函数的调用对象，致使<code>outer()</code>函数的调用对象依然留在内存中。所以我们需要解除对匿名函数的引用。</p>

<pre><code>// 解除对匿名函数的引用，以便释放内存
inner = null;
</code></pre>

<!-- more -->


<p>再看下面这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">handler</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;someone&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">ele</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">ele</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果闭包的作用域链中保存着一个HTML元素，那么将使得该元素无法被销毁。上面的例子创建了一个元素的<code>onclick</code>事件的处理程序的闭包，由于匿名函数一直保持着<code>handler()</code>函数的调用对象，使得只要匿名函数存在，对于HTMl element元素的引用就至少为1,而它所占用的内存也就一直得不到回收。这就需要我们手动显示的收回引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">handler</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;someone&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">ele</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>    <span class="nx">ele</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ele</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. this对象问题</h4>

<blockquote><p>匿名函数的执行环境具有全局性，因此this对象通常指向window</p></blockquote>

<p>在闭包中使用this对象可能也会导致问题。看下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;window&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;object&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">getName</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">getName</span><span class="p">()());</span>      <span class="c1">// &quot;window&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>会alert出&#8221;window&#8221;，是不是感觉很奇怪？</p>

<p>上面提到过，this对象是函数被调用时，调用对象取得的，内部函数在沿着作用域链搜素this的值的时候，首先就会搜索到它自己的调用对象，就可以找到this变量了，这样根本就不可能访问外部函数的this变量。解决这个问题很简单，只要将this对象保存到闭包访问的到的变量里就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;window&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;object&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">getName</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">thit</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建octopress遇到的坑]]></title>
    <link href="http://wibud.github.io/blog/2013/02/23/da-jian-octopressyu-dao-de-keng/"/>
    <updated>2013-02-23T20:16:00+08:00</updated>
    <id>http://wibud.github.io/blog/2013/02/23/da-jian-octopressyu-dao-de-keng</id>
    <content type="html"><![CDATA[<p>如何使用octopress搭建博客这里就不赘述了，最权威的还是去看<a href="http://octopress.org/docs/">官网教程</a>好了，十分的详尽。国人翻译的教程也海了去了，用某度一搜就好了。</p>

<p>尝鲜使用octopress搭建博客，过程一波三折，遇到了一个十分奇葩的问题，纠结了很久。</p>

<p>在我的ubuntu系统上将环境搭建好以后,执行<code>rake generate</code>时，出现了如下的问题。</p>

<pre><code>## Generating Site with Jekyll
overwrite source/stylesheets/screen.css
Configuration from /Users/foobar/Development/project/foobar.github.com/_config.yml
Building site: source -&gt; public
Liquid Exception: undefined method `gsub' for nil:NilClass in page
/Users/foobar/Development/project/foobar.github.com/plugins/octopress_filters.rb:123:in `shorthand_url'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/context.rb:58:in `invoke'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/variable.rb:43:in `block in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/variable.rb:38:in `each'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/variable.rb:38:in `inject'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/variable.rb:38:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:94:in `block in render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `collect'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/tags/if.rb:39:in `block (2 levels) in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/tags/if.rb:37:in `each'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/tags/if.rb:37:in `block in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/context.rb:91:in `stack'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/tags/if.rb:36:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:94:in `block in render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `collect'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:82:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/template.rb:124:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/tags/include.rb:26:in `block (2 levels) in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/context.rb:91:in `stack'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/tags/include.rb:25:in `block in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/tags/include.rb:20:in `chdir'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/tags/include.rb:20:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:94:in `block in render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `collect'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:92:in `render_all'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/block.rb:82:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/template.rb:124:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/liquid-2.3.0/lib/liquid/template.rb:132:in `render!'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/convertible.rb:101:in `do_layout'
/Users/foobar/Development/project/foobar.github.com/plugins/post_filters.rb:167:in `do_layout'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/page.rb:100:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/site.rb:204:in `block in render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/site.rb:203:in `each'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/site.rb:203:in `render'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in `process'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/gems/jekyll-0.12.0/bin/jekyll:264:in `&lt;top (required)&gt;'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/bin/jekyll:19:in `load'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/bin/jekyll:19:in `&lt;main&gt;'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/bin/ruby_noexec_wrapper:14:in `eval'
/Users/foobar/.rvm/gems/ruby-1.9.3-p392/bin/ruby_noexec_wrapper:14:in `&lt;main&gt;'
Build Failed
</code></pre>

<p>查了半天原因，才发现只是因为<code>_config.yml</code>文件中的<code>url:</code>没有赋值，很奇怪，在<code>rake setup_github_pages</code>时有提示你输入Repo地址，但是却没有写入这个配置文件中。之后自己写上就安了~~</p>
]]></content>
  </entry>
  
</feed>
